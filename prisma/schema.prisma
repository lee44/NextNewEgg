generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  created_at    DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  cart          Cart? // Does not exist in the database
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cart {
  id         Int      @id @default(autoincrement())
  user_id    String   @unique // foreign key that connects User and Cart
  created_at DateTime @default(now())

  item CartItems[]
  user User        @relation(fields: [user_id], references: [id]) // Relation fields define connections between models at the Prisma level and do not exist in the database
}

model CartItems {
  id         Int      @id @default(autoincrement())
  quantity   Int
  created_at DateTime @default(now())
  product_id String   @unique
  cart_id    Int

  product Product @relation(fields: [product_id], references: [product_id])
  cart    Cart    @relation(fields: [cart_id], references: [id])
}

model Product {
  id            Int      @id @default(autoincrement())
  product_id    String   @unique
  name          String
  full_name     String
  manufacturer  String
  stock         Int
  shipped_by    String
  free_shipping Boolean
  price         Float?
  discount      Int?
  reviews       Int?
  stars         Float?
  img           String?
  release_date  DateTime
  created_at    DateTime @default(now())
  category_id   Int

  CPUSpecs         CPUSpecs?
  PowerSupplySpecs PowerSupplySpecs?
  CaseFanSpecs     CaseFanSpecs?
  RAMSpecs         RAMSpecs?
  MouseSpecs       MouseSpecs?
  KeyboardSpecs    KeyboardSpecs?
  CPUFanSpecs      CPUFanSpecs?
  CaseSpecs        CaseSpecs?
  StorageSpecs     StorageSpecs?
  GPUSpecs         GPUSpecs?
  MotherboardSpecs MotherboardSpecs?
  CartItems        CartItems?
  category         Category          @relation(fields: [category_id], references: [id])
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  product    Product[]
}

model PowerSupplySpecs {
  id         Int     @id @default(autoincrement())
  power      String?
  color      String?
  efficiency String?
  product_id String  @unique

  product Product @relation(fields: [product_id], references: [product_id])
}

model CaseFanSpecs {
  id          Int    @id @default(autoincrement())
  rpm         String
  air_flow    String
  noise_level String
  product_id  String @unique

  product Product @relation(fields: [product_id], references: [product_id])
}

model RAMSpecs {
  id         Int    @id @default(autoincrement())
  size       String
  quantity   String
  type       String
  product_id String @unique

  product Product @relation(fields: [product_id], references: [product_id])
}

model MouseSpecs {
  id           Int    @id @default(autoincrement())
  track_method String
  color        String
  wireless     String
  product_id   String @unique

  product Product @relation(fields: [product_id], references: [product_id])
}

model KeyboardSpecs {
  id         Int    @id @default(autoincrement())
  style      String
  backlit    String
  color      String
  wireless   String
  product_id String @unique

  product Product @relation(fields: [product_id], references: [product_id])
}

model CPUFanSpecs {
  id          Int    @id @default(autoincrement())
  rpm         String
  color       String
  noise_level String
  product_id  String @unique

  product Product @relation(fields: [product_id], references: [product_id])
}

model CaseSpecs {
  id           Int    @id @default(autoincrement())
  side_panel   String
  color        String
  cabinet_type String
  product_id   String @unique

  product Product @relation(fields: [product_id], references: [product_id])
}

model StorageSpecs {
  id                Int    @id @default(autoincrement())
  storage_interface String
  rpm               String
  type              String
  cache_memory      String
  product_id        String @unique

  product Product @relation(fields: [product_id], references: [product_id])
}

model CPUSpecs {
  id                  Int     @id @default(autoincrement())
  socket              String?
  cores               Int
  base_clock          Float
  boost_clock         Float
  l3_cache            Int
  tdp                 Int
  integrated_graphics Boolean
  product_id          String  @unique

  product Product @relation(fields: [product_id], references: [product_id])
}

model GPUSpecs {
  id                Int    @id @default(autoincrement())
  storage_interface String
  memory            String
  clock_speed       String
  product_id        String @unique

  product Product @relation(fields: [product_id], references: [product_id])
}

model MotherboardSpecs {
  id           Int    @id @default(autoincrement())
  form_factor  String
  memory_slots String
  socket_type  String
  product_id   String @unique

  product Product @relation(fields: [product_id], references: [product_id])
}
